
CircBuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f4c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030f8  080030f8  000040f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003110  08003110  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003110  08003110  00004110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003118  08003118  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003118  08003118  00004118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800311c  0800311c  0000411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003120  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086a4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001771  00000000  00000000  0000d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0000ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000572  00000000  00000000  0000f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bd3  00000000  00000000  0000faf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009023  00000000  00000000  000326c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d22b9  00000000  00000000  0003b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d9a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c2c  00000000  00000000  0010d9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0010f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080030e0 	.word	0x080030e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080030e0 	.word	0x080030e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <circbuff_init>:
#include "circbuff.h"
#include "main.h"
#include <string.h>

void circbuff_init(CircularBuffer *circbuff){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	circbuff->head = 0;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	circbuff->tail = 0;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	circbuff->full = false;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	memset(circbuff->buffer, 0, CIRCBUFF_SIZE);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2240      	movs	r2, #64	@ 0x40
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fda2 	bl	8003088 <memset>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <circbuff_is_empty>:


bool circbuff_is_empty(CircularBuffer *circbuff){
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	bool isEmpty = (circbuff->head == circbuff->tail) && !circbuff->full;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800055a:	b2da      	uxtb	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000562:	b2db      	uxtb	r3, r3
 8000564:	429a      	cmp	r2, r3
 8000566:	d10a      	bne.n	800057e <circbuff_is_empty+0x32>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f083 0301 	eor.w	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <circbuff_is_empty+0x32>
 800057a:	2301      	movs	r3, #1
 800057c:	e000      	b.n	8000580 <circbuff_is_empty+0x34>
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
	return isEmpty;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <circbuff_write>:
bool circbuff_is_full(CircularBuffer *circbuff){
	return circbuff->full;
}


bool circbuff_write(CircularBuffer *circbuff, uint8_t data){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
	if (circbuff->full){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <circbuff_write+0x1c>
//		__enable_irq();
		return false; //Buffer overflow
 80005b0:	2300      	movs	r3, #0
 80005b2:	e026      	b.n	8000602 <circbuff_write+0x6a>
	}

	circbuff->buffer[circbuff->head] = data;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	78fa      	ldrb	r2, [r7, #3]
 80005c2:	545a      	strb	r2, [r3, r1]
	circbuff->head = (circbuff->head + 1) % CIRCBUFF_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	3301      	adds	r3, #1
 80005ce:	425a      	negs	r2, r3
 80005d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005d4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80005d8:	bf58      	it	pl
 80005da:	4253      	negpl	r3, r2
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (circbuff->head == circbuff->tail){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d103      	bne.n	8000600 <circbuff_write+0x68>
		circbuff->full = true;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2201      	movs	r2, #1
 80005fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	}
//	__enable_irq();
	return true;
 8000600:	2301      	movs	r3, #1
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <circbuff_read>:

bool circbuff_read(CircularBuffer *circbuff, uint8_t *data){
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
//	__disable_irq();
	if (circbuff_is_empty(circbuff)){
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ff97 	bl	800054c <circbuff_is_empty>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <circbuff_read+0x1a>
//		__enable_irq();
		return false;
 8000624:	2300      	movs	r3, #0
 8000626:	e01d      	b.n	8000664 <circbuff_read+0x56>
	}


	*data = circbuff->buffer[circbuff->tail];
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	5c9a      	ldrb	r2, [r3, r2]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	701a      	strb	r2, [r3, #0]
	circbuff->tail = (circbuff->tail + 1) % CIRCBUFF_SIZE;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000640:	b2db      	uxtb	r3, r3
 8000642:	3301      	adds	r3, #1
 8000644:	425a      	negs	r2, r3
 8000646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800064a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800064e:	bf58      	it	pl
 8000650:	4253      	negpl	r3, r2
 8000652:	b2da      	uxtb	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	circbuff->full = false;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

//	__enable_irq();

	return true;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
circbuff_init(&uart_rx_buff);
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <main+0x44>)
 8000672:	f7ff ff51 	bl	8000518 <circbuff_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fc27 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f821 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8b5 	bl	80007ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000682:	f000 f889 	bl	8000798 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // UART comms established test code
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	490a      	ldr	r1, [pc, #40]	@ (80006b4 <main+0x48>)
 800068a:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <main+0x4c>)
 800068c:	f001 fd6b 	bl	8002166 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(circbuff_read(&uart_rx_buff, &txByte)){
 8000690:	490a      	ldr	r1, [pc, #40]	@ (80006bc <main+0x50>)
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <main+0x44>)
 8000694:	f7ff ffbb 	bl	800060e <circbuff_read>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0f8      	beq.n	8000690 <main+0x24>

		  HAL_UART_Transmit(&huart1, &txByte, 1, HAL_MAX_DELAY);
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	2201      	movs	r2, #1
 80006a4:	4905      	ldr	r1, [pc, #20]	@ (80006bc <main+0x50>)
 80006a6:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <main+0x4c>)
 80006a8:	f001 fcd2 	bl	8002050 <HAL_UART_Transmit>
	  if(circbuff_read(&uart_rx_buff, &txByte)){
 80006ac:	e7f0      	b.n	8000690 <main+0x24>
 80006ae:	bf00      	nop
 80006b0:	20000070 	.word	0x20000070
 80006b4:	200000b3 	.word	0x200000b3
 80006b8:	20000028 	.word	0x20000028
 80006bc:	200000b4 	.word	0x200000b4

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	@ 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fcda 	bl	8003088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a28      	ldr	r2, [pc, #160]	@ (8000790 <SystemClock_Config+0xd0>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <SystemClock_Config+0xd4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	@ 0x32
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 ff99 	bl	8001680 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000754:	f000 fac4 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000764:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f9fa 	bl	8001b70 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000782:	f000 faad 	bl	8000ce0 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f001 fbee 	bl	8001fb0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 fa81 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000028 	.word	0x20000028
 80007e8:	40011000 	.word	0x40011000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	@ 0x38
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	4bb2      	ldr	r3, [pc, #712]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4ab1      	ldr	r2, [pc, #708]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4baf      	ldr	r3, [pc, #700]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	4bab      	ldr	r3, [pc, #684]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4aaa      	ldr	r2, [pc, #680]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4ba8      	ldr	r3, [pc, #672]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0320 	and.w	r3, r3, #32
 8000836:	61fb      	str	r3, [r7, #28]
 8000838:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4ba4      	ldr	r3, [pc, #656]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4aa3      	ldr	r2, [pc, #652]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4ba1      	ldr	r3, [pc, #644]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b9d      	ldr	r3, [pc, #628]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a9c      	ldr	r2, [pc, #624]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b9a      	ldr	r3, [pc, #616]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b96      	ldr	r3, [pc, #600]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a95      	ldr	r2, [pc, #596]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b93      	ldr	r3, [pc, #588]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b8f      	ldr	r3, [pc, #572]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a8e      	ldr	r2, [pc, #568]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b8c      	ldr	r3, [pc, #560]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b88      	ldr	r3, [pc, #544]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a87      	ldr	r2, [pc, #540]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b85      	ldr	r3, [pc, #532]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b81      	ldr	r3, [pc, #516]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a80      	ldr	r2, [pc, #512]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b7e      	ldr	r3, [pc, #504]	@ (8000ad0 <MX_GPIO_Init+0x2e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2116      	movs	r1, #22
 80008e6:	487b      	ldr	r0, [pc, #492]	@ (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008e8:	f000 feb0 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	4879      	ldr	r0, [pc, #484]	@ (8000ad8 <MX_GPIO_Init+0x2ec>)
 80008f2:	f000 feab 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80008fc:	4877      	ldr	r0, [pc, #476]	@ (8000adc <MX_GPIO_Init+0x2f0>)
 80008fe:	f000 fea5 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000908:	4875      	ldr	r0, [pc, #468]	@ (8000ae0 <MX_GPIO_Init+0x2f4>)
 800090a:	f000 fe9f 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800090e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000920:	230c      	movs	r3, #12
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	486e      	ldr	r0, [pc, #440]	@ (8000ae4 <MX_GPIO_Init+0x2f8>)
 800092c:	f000 fce2 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000930:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000942:	2305      	movs	r3, #5
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	4865      	ldr	r0, [pc, #404]	@ (8000ae4 <MX_GPIO_Init+0x2f8>)
 800094e:	f000 fcd1 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000964:	230e      	movs	r3, #14
 8000966:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	485d      	ldr	r0, [pc, #372]	@ (8000ae4 <MX_GPIO_Init+0x2f8>)
 8000970:	f000 fcc0 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000984:	230c      	movs	r3, #12
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4851      	ldr	r0, [pc, #324]	@ (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000990:	f000 fcb0 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000994:	2316      	movs	r3, #22
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	484a      	ldr	r0, [pc, #296]	@ (8000ad4 <MX_GPIO_Init+0x2e8>)
 80009ac:	f000 fca2 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009b0:	f248 0307 	movw	r3, #32775	@ 0x8007
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4844      	ldr	r0, [pc, #272]	@ (8000ad8 <MX_GPIO_Init+0x2ec>)
 80009c8:	f000 fc94 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009cc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009de:	230e      	movs	r3, #14
 80009e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	483b      	ldr	r0, [pc, #236]	@ (8000ad8 <MX_GPIO_Init+0x2ec>)
 80009ea:	f000 fc83 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009ee:	2380      	movs	r3, #128	@ 0x80
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4834      	ldr	r0, [pc, #208]	@ (8000ad8 <MX_GPIO_Init+0x2ec>)
 8000a06:	f000 fc75 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	482d      	ldr	r0, [pc, #180]	@ (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000a20:	f000 fc68 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a24:	2303      	movs	r3, #3
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a34:	2309      	movs	r3, #9
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	482a      	ldr	r0, [pc, #168]	@ (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000a40:	f000 fc58 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a44:	2304      	movs	r3, #4
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4824      	ldr	r0, [pc, #144]	@ (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000a58:	f000 fc4c 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a5c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4819      	ldr	r0, [pc, #100]	@ (8000ae0 <MX_GPIO_Init+0x2f4>)
 8000a7a:	f000 fc3b 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a7e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a90:	230c      	movs	r3, #12
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4814      	ldr	r0, [pc, #80]	@ (8000aec <MX_GPIO_Init+0x300>)
 8000a9c:	f000 fc2a 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000aa0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ab2:	230e      	movs	r3, #14
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	480a      	ldr	r0, [pc, #40]	@ (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000abe:	f000 fc19 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000ac2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000acc:	e010      	b.n	8000af0 <MX_GPIO_Init+0x304>
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000af8:	230c      	movs	r3, #12
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4862      	ldr	r0, [pc, #392]	@ (8000c8c <MX_GPIO_Init+0x4a0>)
 8000b04:	f000 fbf6 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	485b      	ldr	r0, [pc, #364]	@ (8000c8c <MX_GPIO_Init+0x4a0>)
 8000b1e:	f000 fbe9 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b34:	230c      	movs	r3, #12
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4854      	ldr	r0, [pc, #336]	@ (8000c90 <MX_GPIO_Init+0x4a4>)
 8000b40:	f000 fbd8 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	484d      	ldr	r0, [pc, #308]	@ (8000c90 <MX_GPIO_Init+0x4a4>)
 8000b5a:	f000 fbcb 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b5e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4846      	ldr	r0, [pc, #280]	@ (8000c90 <MX_GPIO_Init+0x4a4>)
 8000b78:	f000 fbbc 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b7c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b8e:	230e      	movs	r3, #14
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	483e      	ldr	r0, [pc, #248]	@ (8000c94 <MX_GPIO_Init+0x4a8>)
 8000b9a:	f000 fbab 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b9e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb0:	230e      	movs	r3, #14
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4837      	ldr	r0, [pc, #220]	@ (8000c98 <MX_GPIO_Init+0x4ac>)
 8000bbc:	f000 fb9a 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc6:	2312      	movs	r3, #18
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	482e      	ldr	r0, [pc, #184]	@ (8000c98 <MX_GPIO_Init+0x4ac>)
 8000bde:	f000 fb89 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be8:	2312      	movs	r3, #18
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4827      	ldr	r0, [pc, #156]	@ (8000c9c <MX_GPIO_Init+0x4b0>)
 8000c00:	f000 fb78 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c04:	2348      	movs	r3, #72	@ 0x48
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c14:	230e      	movs	r3, #14
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481c      	ldr	r0, [pc, #112]	@ (8000c90 <MX_GPIO_Init+0x4a4>)
 8000c20:	f000 fb68 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c36:	2309      	movs	r3, #9
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4814      	ldr	r0, [pc, #80]	@ (8000c94 <MX_GPIO_Init+0x4a8>)
 8000c42:	f000 fb57 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c46:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <MX_GPIO_Init+0x4a8>)
 8000c60:	f000 fb48 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c74:	230c      	movs	r3, #12
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <MX_GPIO_Init+0x4a0>)
 8000c80:	f000 fb38 	bl	80012f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3738      	adds	r7, #56	@ 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40021800 	.word	0x40021800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x30>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d10a      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x28>

		if (!circbuff_write(&uart_rx_buff, rxByte)){
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_UART_RxCpltCallback+0x34>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x38>)
 8000cba:	f7ff fc6d 	bl	8000598 <circbuff_write>
			//Overflow
		}
//		HAL_UART_Transmit(&huart1, &rxByte, 1, HAL_MAX_DELAY);
		HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4904      	ldr	r1, [pc, #16]	@ (8000cd4 <HAL_UART_RxCpltCallback+0x34>)
 8000cc2:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <HAL_UART_RxCpltCallback+0x3c>)
 8000cc4:	f001 fa4f 	bl	8002166 <HAL_UART_Receive_IT>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	200000b3 	.word	0x200000b3
 8000cd8:	20000070 	.word	0x20000070
 8000cdc:	20000028 	.word	0x20000028

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f000 fa0e 	bl	800114c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d134      	bne.n	8000dc8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d96:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da8:	2307      	movs	r3, #7
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <HAL_UART_MspInit+0x9c>)
 8000db4:	f000 fa9e 	bl	80012f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2025      	movs	r0, #37	@ 0x25
 8000dbe:	f000 f9d0 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc2:	2025      	movs	r0, #37	@ 0x25
 8000dc4:	f000 f9e9 	bl	800119a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <MemManage_Handler+0x4>

08000df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f89b 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <USART1_IRQHandler+0x10>)
 8000e42:	f001 f9b5 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000028 	.word	0x20000028

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e78:	f7ff ffea 	bl	8000e50 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	@ (8000eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f002 f8f9 	bl	8003098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fbe1 	bl	800066c <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eb8:	08003120 	.word	0x08003120
  ldr r2, =_sbss
 8000ebc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ec0:	200000bc 	.word	0x200000bc

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f92b 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fef6 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f943 	bl	80011b6 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f90b 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200000b8 	.word	0x200000b8

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200000b8 	.word	0x200000b8

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff feda 	bl	8000f94 <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d008      	beq.n	8001200 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e052      	b.n	80012a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0216 	bic.w	r2, r2, #22
 800120e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800121e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HAL_DMA_Abort+0x62>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0208 	bic.w	r2, r2, #8
 800123e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001250:	e013      	b.n	800127a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001252:	f7ff fe9f 	bl	8000f94 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b05      	cmp	r3, #5
 800125e:	d90c      	bls.n	800127a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2220      	movs	r2, #32
 8001264:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e015      	b.n	80012a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e4      	bne.n	8001252 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128c:	223f      	movs	r2, #63	@ 0x3f
 800128e:	409a      	lsls	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d004      	beq.n	80012cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e00c      	b.n	80012e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2205      	movs	r2, #5
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e177      	b.n	8001600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 8166 	bne.w	80015fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	2b02      	cmp	r3, #2
 8001344:	d130      	bne.n	80013a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80c0 	beq.w	80015fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b66      	ldr	r3, [pc, #408]	@ (8001618 <HAL_GPIO_Init+0x324>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a65      	ldr	r2, [pc, #404]	@ (8001618 <HAL_GPIO_Init+0x324>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b63      	ldr	r3, [pc, #396]	@ (8001618 <HAL_GPIO_Init+0x324>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001496:	4a61      	ldr	r2, [pc, #388]	@ (800161c <HAL_GPIO_Init+0x328>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a58      	ldr	r2, [pc, #352]	@ (8001620 <HAL_GPIO_Init+0x32c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d037      	beq.n	8001532 <HAL_GPIO_Init+0x23e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a57      	ldr	r2, [pc, #348]	@ (8001624 <HAL_GPIO_Init+0x330>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d031      	beq.n	800152e <HAL_GPIO_Init+0x23a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a56      	ldr	r2, [pc, #344]	@ (8001628 <HAL_GPIO_Init+0x334>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d02b      	beq.n	800152a <HAL_GPIO_Init+0x236>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a55      	ldr	r2, [pc, #340]	@ (800162c <HAL_GPIO_Init+0x338>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d025      	beq.n	8001526 <HAL_GPIO_Init+0x232>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a54      	ldr	r2, [pc, #336]	@ (8001630 <HAL_GPIO_Init+0x33c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01f      	beq.n	8001522 <HAL_GPIO_Init+0x22e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a53      	ldr	r2, [pc, #332]	@ (8001634 <HAL_GPIO_Init+0x340>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d019      	beq.n	800151e <HAL_GPIO_Init+0x22a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a52      	ldr	r2, [pc, #328]	@ (8001638 <HAL_GPIO_Init+0x344>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0x226>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a51      	ldr	r2, [pc, #324]	@ (800163c <HAL_GPIO_Init+0x348>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00d      	beq.n	8001516 <HAL_GPIO_Init+0x222>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a50      	ldr	r2, [pc, #320]	@ (8001640 <HAL_GPIO_Init+0x34c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d007      	beq.n	8001512 <HAL_GPIO_Init+0x21e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4f      	ldr	r2, [pc, #316]	@ (8001644 <HAL_GPIO_Init+0x350>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_GPIO_Init+0x21a>
 800150a:	2309      	movs	r3, #9
 800150c:	e012      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800150e:	230a      	movs	r3, #10
 8001510:	e010      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001512:	2308      	movs	r3, #8
 8001514:	e00e      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001516:	2307      	movs	r3, #7
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800151a:	2306      	movs	r3, #6
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x240>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x240>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	@ (800161c <HAL_GPIO_Init+0x328>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <HAL_GPIO_Init+0x354>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a34      	ldr	r2, [pc, #208]	@ (8001648 <HAL_GPIO_Init+0x354>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <HAL_GPIO_Init+0x354>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a29      	ldr	r2, [pc, #164]	@ (8001648 <HAL_GPIO_Init+0x354>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <HAL_GPIO_Init+0x354>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001648 <HAL_GPIO_Init+0x354>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <HAL_GPIO_Init+0x354>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <HAL_GPIO_Init+0x354>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae84 	bls.w	8001310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	@ 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40021c00 	.word	0x40021c00
 8001640:	40022000 	.word	0x40022000
 8001644:	40022400 	.word	0x40022400
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e267      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d075      	beq.n	800178a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800169e:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b85      	ldr	r3, [pc, #532]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d112      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b82      	ldr	r3, [pc, #520]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016c2:	d10b      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	4b7e      	ldr	r3, [pc, #504]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05b      	beq.n	8001788 <HAL_RCC_OscConfig+0x108>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d157      	bne.n	8001788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e242      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x74>
 80016e6:	4b76      	ldr	r3, [pc, #472]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a75      	ldr	r2, [pc, #468]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b70      	ldr	r3, [pc, #448]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6f      	ldr	r2, [pc, #444]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b6d      	ldr	r3, [pc, #436]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6c      	ldr	r2, [pc, #432]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 8001718:	4b69      	ldr	r3, [pc, #420]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a68      	ldr	r2, [pc, #416]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b66      	ldr	r3, [pc, #408]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a65      	ldr	r2, [pc, #404]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fc2c 	bl	8000f94 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fc28 	bl	8000f94 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	@ 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e207      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b5b      	ldr	r3, [pc, #364]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xc0>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fc18 	bl	8000f94 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fc14 	bl	8000f94 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	@ 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1f3      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0xe8>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001796:	4b4a      	ldr	r3, [pc, #296]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b44      	ldr	r3, [pc, #272]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b41      	ldr	r3, [pc, #260]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c7      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3b      	ldr	r3, [pc, #236]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4937      	ldr	r1, [pc, #220]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <HAL_RCC_OscConfig+0x244>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fbcd 	bl	8000f94 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fbc9 	bl	8000f94 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1a8      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4925      	ldr	r1, [pc, #148]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <HAL_RCC_OscConfig+0x244>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fbac 	bl	8000f94 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fba8 	bl	8000f94 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e187      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d036      	beq.n	80018d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_RCC_OscConfig+0x248>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fb8c 	bl	8000f94 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fb88 	bl	8000f94 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e167      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_RCC_OscConfig+0x240>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x200>
 800189e:	e01b      	b.n	80018d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_RCC_OscConfig+0x248>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb75 	bl	8000f94 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	e00e      	b.n	80018cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb71 	bl	8000f94 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d907      	bls.n	80018cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e150      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	42470000 	.word	0x42470000
 80018c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	4b88      	ldr	r3, [pc, #544]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ea      	bne.n	80018ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8097 	beq.w	8001a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ea:	4b81      	ldr	r3, [pc, #516]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b7d      	ldr	r3, [pc, #500]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a7c      	ldr	r2, [pc, #496]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b7a      	ldr	r3, [pc, #488]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b77      	ldr	r3, [pc, #476]	@ (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d118      	bne.n	8001954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b74      	ldr	r3, [pc, #464]	@ (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a73      	ldr	r2, [pc, #460]	@ (8001af4 <HAL_RCC_OscConfig+0x474>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff fb31 	bl	8000f94 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff fb2d 	bl	8000f94 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e10c      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b6a      	ldr	r3, [pc, #424]	@ (8001af4 <HAL_RCC_OscConfig+0x474>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x2ea>
 800195c:	4b64      	ldr	r3, [pc, #400]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001960:	4a63      	ldr	r2, [pc, #396]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	@ 0x70
 8001968:	e01c      	b.n	80019a4 <HAL_RCC_OscConfig+0x324>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x30c>
 8001972:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001976:	4a5e      	ldr	r2, [pc, #376]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	@ 0x70
 800197e:	4b5c      	ldr	r3, [pc, #368]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001982:	4a5b      	ldr	r2, [pc, #364]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	@ 0x70
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0x324>
 800198c:	4b58      	ldr	r3, [pc, #352]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001990:	4a57      	ldr	r2, [pc, #348]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	@ 0x70
 8001998:	4b55      	ldr	r3, [pc, #340]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199c:	4a54      	ldr	r2, [pc, #336]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d015      	beq.n	80019d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff faf2 	bl	8000f94 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff faee 	bl	8000f94 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0cb      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	4b49      	ldr	r3, [pc, #292]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ee      	beq.n	80019b4 <HAL_RCC_OscConfig+0x334>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fadc 	bl	8000f94 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff fad8 	bl	8000f94 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0b5      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	4b3e      	ldr	r3, [pc, #248]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	4a38      	ldr	r2, [pc, #224]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a1 	beq.w	8001b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1e:	4b34      	ldr	r3, [pc, #208]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d05c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d141      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff faac 	bl	8000f94 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff faa8 	bl	8000f94 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e087      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	3b01      	subs	r3, #1
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	491b      	ldr	r1, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fa81 	bl	8000f94 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fa7d 	bl	8000f94 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e05c      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x416>
 8001ab4:	e054      	b.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fa6a 	bl	8000f94 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fa66 	bl	8000f94 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e045      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
 8001ae2:	e03d      	b.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e038      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x4ec>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d028      	beq.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d121      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d11a      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d111      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	3b01      	subs	r3, #1
 8001b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0cc      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b68      	ldr	r3, [pc, #416]	@ (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d90c      	bls.n	8001bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b65      	ldr	r3, [pc, #404]	@ (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b63      	ldr	r3, [pc, #396]	@ (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0b8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a52      	ldr	r2, [pc, #328]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b50      	ldr	r3, [pc, #320]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	494d      	ldr	r1, [pc, #308]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d044      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d119      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e067      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b37      	ldr	r3, [pc, #220]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4934      	ldr	r1, [pc, #208]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff f998 	bl	8000f94 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff f994 	bl	8000f94 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d20c      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e032      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	490e      	ldr	r1, [pc, #56]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cf6:	f000 f821 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	490a      	ldr	r1, [pc, #40]	@ (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f8f8 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	080030f8 	.word	0x080030f8
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d40:	b094      	sub	sp, #80	@ 0x50
 8001d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d54:	4b79      	ldr	r3, [pc, #484]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d00d      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x40>
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	f200 80e1 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d6e:	e0db      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b73      	ldr	r3, [pc, #460]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d74:	e0db      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d76:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d7a:	e0d8      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d86:	4b6d      	ldr	r3, [pc, #436]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b6a      	ldr	r3, [pc, #424]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	2200      	movs	r2, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001da6:	2300      	movs	r3, #0
 8001da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dae:	4622      	mov	r2, r4
 8001db0:	462b      	mov	r3, r5
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc0:	0150      	lsls	r0, r2, #5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	1a51      	subs	r1, r2, r1
 8001dca:	6139      	str	r1, [r7, #16]
 8001dcc:	4629      	mov	r1, r5
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001de0:	4659      	mov	r1, fp
 8001de2:	018b      	lsls	r3, r1, #6
 8001de4:	4651      	mov	r1, sl
 8001de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dea:	4651      	mov	r1, sl
 8001dec:	018a      	lsls	r2, r1, #6
 8001dee:	4651      	mov	r1, sl
 8001df0:	ebb2 0801 	subs.w	r8, r2, r1
 8001df4:	4659      	mov	r1, fp
 8001df6:	eb63 0901 	sbc.w	r9, r3, r1
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	eb18 0303 	adds.w	r3, r8, r3
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	eb49 0303 	adc.w	r3, r9, r3
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	024b      	lsls	r3, r1, #9
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e38:	4621      	mov	r1, r4
 8001e3a:	024a      	lsls	r2, r1, #9
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e42:	2200      	movs	r2, #0
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e4c:	f7fe f9ce 	bl	80001ec <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4613      	mov	r3, r2
 8001e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e58:	e058      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5a:	4b38      	ldr	r3, [pc, #224]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	2200      	movs	r2, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	4611      	mov	r1, r2
 8001e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e74:	4642      	mov	r2, r8
 8001e76:	464b      	mov	r3, r9
 8001e78:	f04f 0000 	mov.w	r0, #0
 8001e7c:	f04f 0100 	mov.w	r1, #0
 8001e80:	0159      	lsls	r1, r3, #5
 8001e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e86:	0150      	lsls	r0, r2, #5
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e92:	4649      	mov	r1, r9
 8001e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eac:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	00eb      	lsls	r3, r5, #3
 8001ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec2:	00e2      	lsls	r2, r4, #3
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	4643      	mov	r3, r8
 8001eca:	18e3      	adds	r3, r4, r3
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	464b      	mov	r3, r9
 8001ed0:	eb45 0303 	adc.w	r3, r5, r3
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	028b      	lsls	r3, r1, #10
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eec:	4621      	mov	r1, r4
 8001eee:	028a      	lsls	r2, r1, #10
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	61fa      	str	r2, [r7, #28]
 8001efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f00:	f7fe f974 	bl	80001ec <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3750      	adds	r7, #80	@ 0x50
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f64:	f7ff fff0 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4903      	ldr	r1, [pc, #12]	@ (8001f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	08003108 	.word	0x08003108

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f8c:	f7ff ffdc 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0b5b      	lsrs	r3, r3, #13
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	@ (8001fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08003108 	.word	0x08003108

08001fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e042      	b.n	8002048 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe feb0 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	@ 0x24
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fdd3 	bl	8002ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	@ 0x28
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b20      	cmp	r3, #32
 800206e:	d175      	bne.n	800215c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_UART_Transmit+0x2c>
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e06e      	b.n	800215e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2221      	movs	r2, #33	@ 0x21
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800208e:	f7fe ff81 	bl	8000f94 <HAL_GetTick>
 8002092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	88fa      	ldrh	r2, [r7, #6]
 800209e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020a8:	d108      	bne.n	80020bc <HAL_UART_Transmit+0x6c>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d104      	bne.n	80020bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	e003      	b.n	80020c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020c4:	e02e      	b.n	8002124 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2180      	movs	r1, #128	@ 0x80
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fb37 	bl	8002744 <UART_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e03a      	b.n	800215e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10b      	bne.n	8002106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3302      	adds	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e007      	b.n	8002116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3301      	adds	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1cb      	bne.n	80020c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2140      	movs	r1, #64	@ 0x40
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fb03 	bl	8002744 <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e006      	b.n	800215e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e000      	b.n	800215e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	4613      	mov	r3, r2
 8002172:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b20      	cmp	r3, #32
 800217e:	d112      	bne.n	80021a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_UART_Receive_IT+0x26>
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e00b      	b.n	80021a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	461a      	mov	r2, r3
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fb2a 	bl	80027f6 <UART_Start_Receive_IT>
 80021a2:	4603      	mov	r3, r0
 80021a4:	e000      	b.n	80021a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
  }
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0ba      	sub	sp, #232	@ 0xe8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10f      	bne.n	8002216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_UART_IRQHandler+0x66>
 8002202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fc07 	bl	8002a22 <UART_Receive_IT>
      return;
 8002214:	e273      	b.n	80026fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80de 	beq.w	80023dc <HAL_UART_IRQHandler+0x22c>
 8002220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800222c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002230:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80d1 	beq.w	80023dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800223a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_UART_IRQHandler+0xae>
 8002246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800225e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_UART_IRQHandler+0xd2>
 800226a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_UART_IRQHandler+0xf6>
 800228e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d011      	beq.n	80022d6 <HAL_UART_IRQHandler+0x126>
 80022b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0208 	orr.w	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 820a 	beq.w	80026f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_UART_IRQHandler+0x14e>
 80022ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fb92 	bl	8002a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b40      	cmp	r3, #64	@ 0x40
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d103      	bne.n	800232a <HAL_UART_IRQHandler+0x17a>
 8002322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d04f      	beq.n	80023ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fa9d 	bl	800286a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233a:	2b40      	cmp	r3, #64	@ 0x40
 800233c:	d141      	bne.n	80023c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3314      	adds	r3, #20
 8002344:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800235c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3314      	adds	r3, #20
 8002366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800236a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800236e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800237a:	e841 2300 	strex	r3, r2, [r1]
 800237e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1d9      	bne.n	800233e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d013      	beq.n	80023ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002396:	4a8a      	ldr	r2, [pc, #552]	@ (80025c0 <HAL_UART_IRQHandler+0x410>)
 8002398:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe ff85 	bl	80012ae <HAL_DMA_Abort_IT>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023b4:	4610      	mov	r0, r2
 80023b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b8:	e00e      	b.n	80023d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f9ac 	bl	8002718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	e00a      	b.n	80023d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9a8 	bl	8002718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	e006      	b.n	80023d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f9a4 	bl	8002718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023d6:	e18d      	b.n	80026f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	bf00      	nop
    return;
 80023da:	e18b      	b.n	80026f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f040 8167 	bne.w	80026b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8160 	beq.w	80026b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80023f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8159 	beq.w	80026b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002422:	2b40      	cmp	r3, #64	@ 0x40
 8002424:	f040 80ce 	bne.w	80025c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a9 	beq.w	8002590 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002446:	429a      	cmp	r2, r3
 8002448:	f080 80a2 	bcs.w	8002590 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002452:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800245e:	f000 8088 	beq.w	8002572 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002478:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800247c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800248e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002496:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800249a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800249e:	e841 2300 	strex	r3, r2, [r1]
 80024a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1d9      	bne.n	8002462 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3314      	adds	r3, #20
 80024b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3314      	adds	r3, #20
 80024ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024de:	e841 2300 	strex	r3, r2, [r1]
 80024e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e1      	bne.n	80024ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3314      	adds	r3, #20
 80024f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f4:	e853 3f00 	ldrex	r3, [r3]
 80024f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80024fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3314      	adds	r3, #20
 800250a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800250e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002510:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002512:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002516:	e841 2300 	strex	r3, r2, [r1]
 800251a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800251c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1e3      	bne.n	80024ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800253a:	e853 3f00 	ldrex	r3, [r3]
 800253e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002542:	f023 0310 	bic.w	r3, r3, #16
 8002546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002554:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002556:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002558:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800255a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800255c:	e841 2300 	strex	r3, r2, [r1]
 8002560:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e3      	bne.n	8002530 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fe2e 	bl	80011ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002580:	b29b      	uxth	r3, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	b29b      	uxth	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8cf 	bl	800272c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800258e:	e0b3      	b.n	80026f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002594:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 80ad 	bne.w	80026f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a8:	f040 80a6 	bne.w	80026f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025b6:	4619      	mov	r1, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8b7 	bl	800272c <HAL_UARTEx_RxEventCallback>
      return;
 80025be:	e09b      	b.n	80026f8 <HAL_UART_IRQHandler+0x548>
 80025c0:	08002931 	.word	0x08002931
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 808e 	beq.w	80026fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80025e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8089 	beq.w	80026fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f4:	e853 3f00 	ldrex	r3, [r3]
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800260e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002616:	e841 2300 	strex	r3, r2, [r1]
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800261c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e3      	bne.n	80025ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3314      	adds	r3, #20
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	e853 3f00 	ldrex	r3, [r3]
 8002630:	623b      	str	r3, [r7, #32]
   return(result);
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3314      	adds	r3, #20
 8002642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002646:	633a      	str	r2, [r7, #48]	@ 0x30
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800264c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e3      	bne.n	8002622 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	e853 3f00 	ldrex	r3, [r3]
 8002676:	60fb      	str	r3, [r7, #12]
   return(result);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0310 	bic.w	r3, r3, #16
 800267e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800268c:	61fa      	str	r2, [r7, #28]
 800268e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002690:	69b9      	ldr	r1, [r7, #24]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	e841 2300 	strex	r3, r2, [r1]
 8002698:	617b      	str	r3, [r7, #20]
   return(result);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e3      	bne.n	8002668 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f83d 	bl	800272c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026b2:	e023      	b.n	80026fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_UART_IRQHandler+0x524>
 80026c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f940 	bl	8002952 <UART_Transmit_IT>
    return;
 80026d2:	e014      	b.n	80026fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <HAL_UART_IRQHandler+0x54e>
 80026e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f980 	bl	80029f2 <UART_EndTransmit_IT>
    return;
 80026f2:	e004      	b.n	80026fe <HAL_UART_IRQHandler+0x54e>
    return;
 80026f4:	bf00      	nop
 80026f6:	e002      	b.n	80026fe <HAL_UART_IRQHandler+0x54e>
      return;
 80026f8:	bf00      	nop
 80026fa:	e000      	b.n	80026fe <HAL_UART_IRQHandler+0x54e>
      return;
 80026fc:	bf00      	nop
  }
}
 80026fe:	37e8      	adds	r7, #232	@ 0xe8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002754:	e03b      	b.n	80027ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d037      	beq.n	80027ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fc19 	bl	8000f94 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <UART_WaitOnFlagUntilTimeout+0x30>
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e03a      	b.n	80027ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d023      	beq.n	80027ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b80      	cmp	r3, #128	@ 0x80
 800278a:	d020      	beq.n	80027ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b40      	cmp	r3, #64	@ 0x40
 8002790:	d01d      	beq.n	80027ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b08      	cmp	r3, #8
 800279e:	d116      	bne.n	80027ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f857 	bl	800286a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2208      	movs	r2, #8
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4013      	ands	r3, r2
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d0b4      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2222      	movs	r2, #34	@ 0x22
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800283a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800286a:	b480      	push	{r7}
 800286c:	b095      	sub	sp, #84	@ 0x54
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002892:	643a      	str	r2, [r7, #64]	@ 0x40
 8002894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e5      	bne.n	8002872 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3314      	adds	r3, #20
 80028ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e5      	bne.n	80028a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d119      	bne.n	8002916 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f023 0310 	bic.w	r3, r3, #16
 80028f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002902:	61ba      	str	r2, [r7, #24]
 8002904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002906:	6979      	ldr	r1, [r7, #20]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	e841 2300 	strex	r3, r2, [r1]
 800290e:	613b      	str	r3, [r7, #16]
   return(result);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e5      	bne.n	80028e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002924:	bf00      	nop
 8002926:	3754      	adds	r7, #84	@ 0x54
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff fee7 	bl	8002718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b21      	cmp	r3, #33	@ 0x21
 8002964:	d13e      	bne.n	80029e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296e:	d114      	bne.n	800299a <UART_Transmit_IT+0x48>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d110      	bne.n	800299a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	621a      	str	r2, [r3, #32]
 8002998:	e008      	b.n	80029ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	1c59      	adds	r1, r3, #1
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6211      	str	r1, [r2, #32]
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4619      	mov	r1, r3
 80029ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10f      	bne.n	80029e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fe76 	bl	8002704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b08c      	sub	sp, #48	@ 0x30
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b22      	cmp	r3, #34	@ 0x22
 8002a3c:	f040 80aa 	bne.w	8002b94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a48:	d115      	bne.n	8002a76 <UART_Receive_IT+0x54>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d111      	bne.n	8002a76 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a74:	e024      	b.n	8002ac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a84:	d007      	beq.n	8002a96 <UART_Receive_IT+0x74>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <UART_Receive_IT+0x82>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e008      	b.n	8002ab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4619      	mov	r1, r3
 8002ace:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d15d      	bne.n	8002b90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d135      	bne.n	8002b86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f023 0310 	bic.w	r3, r3, #16
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b40:	623a      	str	r2, [r7, #32]
 8002b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	69f9      	ldr	r1, [r7, #28]
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e5      	bne.n	8002b20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d10a      	bne.n	8002b78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fdd4 	bl	800272c <HAL_UARTEx_RxEventCallback>
 8002b84:	e002      	b.n	8002b8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe f88a 	bl	8000ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e002      	b.n	8002b96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3730      	adds	r7, #48	@ 0x30
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba4:	b0c0      	sub	sp, #256	@ 0x100
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbc:	68d9      	ldr	r1, [r3, #12]
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	ea40 0301 	orr.w	r3, r0, r1
 8002bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002bf8:	f021 010c 	bic.w	r1, r1, #12
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c06:	430b      	orrs	r3, r1
 8002c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1a:	6999      	ldr	r1, [r3, #24]
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	ea40 0301 	orr.w	r3, r0, r1
 8002c26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b8f      	ldr	r3, [pc, #572]	@ (8002e6c <UART_SetConfig+0x2cc>)
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d005      	beq.n	8002c40 <UART_SetConfig+0xa0>
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e70 <UART_SetConfig+0x2d0>)
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d104      	bne.n	8002c4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c40:	f7ff f9a2 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 8002c44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c48:	e003      	b.n	8002c52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c4a:	f7ff f989 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 8002c4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c5c:	f040 810c 	bne.w	8002e78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c72:	4622      	mov	r2, r4
 8002c74:	462b      	mov	r3, r5
 8002c76:	1891      	adds	r1, r2, r2
 8002c78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c7a:	415b      	adcs	r3, r3
 8002c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c82:	4621      	mov	r1, r4
 8002c84:	eb12 0801 	adds.w	r8, r2, r1
 8002c88:	4629      	mov	r1, r5
 8002c8a:	eb43 0901 	adc.w	r9, r3, r1
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca2:	4690      	mov	r8, r2
 8002ca4:	4699      	mov	r9, r3
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	eb18 0303 	adds.w	r3, r8, r3
 8002cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	eb49 0303 	adc.w	r3, r9, r3
 8002cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cce:	460b      	mov	r3, r1
 8002cd0:	18db      	adds	r3, r3, r3
 8002cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	eb42 0303 	adc.w	r3, r2, r3
 8002cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ce0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ce4:	f7fd fa82 	bl	80001ec <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <UART_SetConfig+0x2d4>)
 8002cee:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	011c      	lsls	r4, r3, #4
 8002cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	1891      	adds	r1, r2, r2
 8002d0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d10:	415b      	adcs	r3, r3
 8002d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d18:	4641      	mov	r1, r8
 8002d1a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d1e:	4649      	mov	r1, r9
 8002d20:	eb43 0b01 	adc.w	fp, r3, r1
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d38:	4692      	mov	sl, r2
 8002d3a:	469b      	mov	fp, r3
 8002d3c:	4643      	mov	r3, r8
 8002d3e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d46:	464b      	mov	r3, r9
 8002d48:	eb4b 0303 	adc.w	r3, fp, r3
 8002d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d64:	460b      	mov	r3, r1
 8002d66:	18db      	adds	r3, r3, r3
 8002d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	eb42 0303 	adc.w	r3, r2, r3
 8002d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d7a:	f7fd fa37 	bl	80001ec <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	4b3b      	ldr	r3, [pc, #236]	@ (8002e74 <UART_SetConfig+0x2d4>)
 8002d86:	fba3 2301 	umull	r2, r3, r3, r1
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2264      	movs	r2, #100	@ 0x64
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	1acb      	subs	r3, r1, r3
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d9a:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <UART_SetConfig+0x2d4>)
 8002d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002da8:	441c      	add	r4, r3
 8002daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002db4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002db8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dcc:	4641      	mov	r1, r8
 8002dce:	1851      	adds	r1, r2, r1
 8002dd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	414b      	adcs	r3, r1
 8002dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002de4:	4659      	mov	r1, fp
 8002de6:	00cb      	lsls	r3, r1, #3
 8002de8:	4651      	mov	r1, sl
 8002dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dee:	4651      	mov	r1, sl
 8002df0:	00ca      	lsls	r2, r1, #3
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e00:	464b      	mov	r3, r9
 8002e02:	460a      	mov	r2, r1
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e20:	460b      	mov	r3, r1
 8002e22:	18db      	adds	r3, r3, r3
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e26:	4613      	mov	r3, r2
 8002e28:	eb42 0303 	adc.w	r3, r2, r3
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e36:	f7fd f9d9 	bl	80001ec <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <UART_SetConfig+0x2d4>)
 8002e40:	fba3 1302 	umull	r1, r3, r3, r2
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	2164      	movs	r1, #100	@ 0x64
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3332      	adds	r3, #50	@ 0x32
 8002e52:	4a08      	ldr	r2, [pc, #32]	@ (8002e74 <UART_SetConfig+0x2d4>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	f003 0207 	and.w	r2, r3, #7
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4422      	add	r2, r4
 8002e66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e68:	e106      	b.n	8003078 <UART_SetConfig+0x4d8>
 8002e6a:	bf00      	nop
 8002e6c:	40011000 	.word	0x40011000
 8002e70:	40011400 	.word	0x40011400
 8002e74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e8a:	4642      	mov	r2, r8
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	1891      	adds	r1, r2, r2
 8002e90:	6239      	str	r1, [r7, #32]
 8002e92:	415b      	adcs	r3, r3
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	1854      	adds	r4, r2, r1
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	eb43 0501 	adc.w	r5, r3, r1
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	00eb      	lsls	r3, r5, #3
 8002eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb2:	00e2      	lsls	r2, r4, #3
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	461d      	mov	r5, r3
 8002eb8:	4643      	mov	r3, r8
 8002eba:	18e3      	adds	r3, r4, r3
 8002ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	eb45 0303 	adc.w	r3, r5, r3
 8002ec6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ed6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	008b      	lsls	r3, r1, #2
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	008a      	lsls	r2, r1, #2
 8002ef4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ef8:	f7fd f978 	bl	80001ec <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4b60      	ldr	r3, [pc, #384]	@ (8003084 <UART_SetConfig+0x4e4>)
 8002f02:	fba3 2302 	umull	r2, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	011c      	lsls	r4, r3, #4
 8002f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	61b9      	str	r1, [r7, #24]
 8002f24:	415b      	adcs	r3, r3
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	1851      	adds	r1, r2, r1
 8002f30:	6139      	str	r1, [r7, #16]
 8002f32:	4649      	mov	r1, r9
 8002f34:	414b      	adcs	r3, r1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f44:	4659      	mov	r1, fp
 8002f46:	00cb      	lsls	r3, r1, #3
 8002f48:	4651      	mov	r1, sl
 8002f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f4e:	4651      	mov	r1, sl
 8002f50:	00ca      	lsls	r2, r1, #3
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	4642      	mov	r2, r8
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f60:	464b      	mov	r3, r9
 8002f62:	460a      	mov	r2, r1
 8002f64:	eb42 0303 	adc.w	r3, r2, r3
 8002f68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f84:	4649      	mov	r1, r9
 8002f86:	008b      	lsls	r3, r1, #2
 8002f88:	4641      	mov	r1, r8
 8002f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f8e:	4641      	mov	r1, r8
 8002f90:	008a      	lsls	r2, r1, #2
 8002f92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f96:	f7fd f929 	bl	80001ec <__aeabi_uldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4b38      	ldr	r3, [pc, #224]	@ (8003084 <UART_SetConfig+0x4e4>)
 8002fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2264      	movs	r2, #100	@ 0x64
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	1acb      	subs	r3, r1, r3
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	3332      	adds	r3, #50	@ 0x32
 8002fb4:	4a33      	ldr	r2, [pc, #204]	@ (8003084 <UART_SetConfig+0x4e4>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc0:	441c      	add	r4, r3
 8002fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fca:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	1891      	adds	r1, r2, r2
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	415b      	adcs	r3, r3
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	1851      	adds	r1, r2, r1
 8002fe4:	6039      	str	r1, [r7, #0]
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	414b      	adcs	r3, r1
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	00cb      	lsls	r3, r1, #3
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003002:	4651      	mov	r1, sl
 8003004:	00ca      	lsls	r2, r1, #3
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	4603      	mov	r3, r0
 800300c:	4642      	mov	r2, r8
 800300e:	189b      	adds	r3, r3, r2
 8003010:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003012:	464b      	mov	r3, r9
 8003014:	460a      	mov	r2, r1
 8003016:	eb42 0303 	adc.w	r3, r2, r3
 800301a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	663b      	str	r3, [r7, #96]	@ 0x60
 8003026:	667a      	str	r2, [r7, #100]	@ 0x64
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003034:	4649      	mov	r1, r9
 8003036:	008b      	lsls	r3, r1, #2
 8003038:	4641      	mov	r1, r8
 800303a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303e:	4641      	mov	r1, r8
 8003040:	008a      	lsls	r2, r1, #2
 8003042:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003046:	f7fd f8d1 	bl	80001ec <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4b0d      	ldr	r3, [pc, #52]	@ (8003084 <UART_SetConfig+0x4e4>)
 8003050:	fba3 1302 	umull	r1, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	2164      	movs	r1, #100	@ 0x64
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	3332      	adds	r3, #50	@ 0x32
 8003062:	4a08      	ldr	r2, [pc, #32]	@ (8003084 <UART_SetConfig+0x4e4>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4422      	add	r2, r4
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	bf00      	nop
 800307a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800307e:	46bd      	mov	sp, r7
 8003080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003084:	51eb851f 	.word	0x51eb851f

08003088 <memset>:
 8003088:	4402      	add	r2, r0
 800308a:	4603      	mov	r3, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <__libc_init_array>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	4d0d      	ldr	r5, [pc, #52]	@ (80030d0 <__libc_init_array+0x38>)
 800309c:	4c0d      	ldr	r4, [pc, #52]	@ (80030d4 <__libc_init_array+0x3c>)
 800309e:	1b64      	subs	r4, r4, r5
 80030a0:	10a4      	asrs	r4, r4, #2
 80030a2:	2600      	movs	r6, #0
 80030a4:	42a6      	cmp	r6, r4
 80030a6:	d109      	bne.n	80030bc <__libc_init_array+0x24>
 80030a8:	4d0b      	ldr	r5, [pc, #44]	@ (80030d8 <__libc_init_array+0x40>)
 80030aa:	4c0c      	ldr	r4, [pc, #48]	@ (80030dc <__libc_init_array+0x44>)
 80030ac:	f000 f818 	bl	80030e0 <_init>
 80030b0:	1b64      	subs	r4, r4, r5
 80030b2:	10a4      	asrs	r4, r4, #2
 80030b4:	2600      	movs	r6, #0
 80030b6:	42a6      	cmp	r6, r4
 80030b8:	d105      	bne.n	80030c6 <__libc_init_array+0x2e>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c0:	4798      	blx	r3
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7ee      	b.n	80030a4 <__libc_init_array+0xc>
 80030c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ca:	4798      	blx	r3
 80030cc:	3601      	adds	r6, #1
 80030ce:	e7f2      	b.n	80030b6 <__libc_init_array+0x1e>
 80030d0:	08003118 	.word	0x08003118
 80030d4:	08003118 	.word	0x08003118
 80030d8:	08003118 	.word	0x08003118
 80030dc:	0800311c 	.word	0x0800311c

080030e0 <_init>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr

080030ec <_fini>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr
